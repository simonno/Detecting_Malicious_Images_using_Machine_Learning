import pickle
import os
import mxnet as mx
import numpy as np
import cv2


def extract_images_and_labels(path, file):
    f = open(path + file, 'rb')
    dict = pickle.load(f, encoding='latin1')
    images = dict['data']
    images = np.reshape(images, (10000, 3, 32, 32))
    labels = dict['labels']
    image_array = mx.nd.array(images)
    label_array = mx.nd.array(labels)
    return image_array, label_array


def extract_categories(path, file):
    f = open(path + file, 'rb')
    dict = pickle.load(f, encoding='latin1')
    return dict['label_names']


def save_cifar_image(array, path, file):
    # array is 3x32x32. cv2 needs 32x32x3
    array = array.asnumpy().transpose(1, 2, 0)
    # array is RGB. cv2 needs BGR
    array = cv2.cvtColor(array, cv2.COLOR_RGB2BGR)
    # save to PNG file
    return cv2.imwrite(path + file + ".png", array)


def create_images(number_of_images):
    images_array, labels_array = extract_images_and_labels("cifar-10-batches-py/", "data_batch_1")

    categories = extract_categories("cifar-10-batches-py/", "batches.meta")
    path = os.path.join(os.path.abspath(os.path.curdir), 'Images')
    cats = []

    if not os.path.exists(path):
        os.makedirs(path)

    for i in range(number_of_images):
        save_cifar_image(images_array[i], path, "/image" + str(i))
        category = labels_array[i].asnumpy()
        category = int(category[0])
        cats.append(categories[category])
    return cats


def to_bit_generator(msg):
    """Converts a message into a generator which returns 1 bit of the message
    each time."""
    for c in msg:
        o = c
        for i in range(8):
            yield (o & (1 << i)) >> i


def create_bad_image(path_image, path_malware):
    # Create a generator for the hidden message
    hidden_message = to_bit_generator(open(path_malware, "rb").read() * 10)

    # Read the original image
    img = cv2.imread(path_image, cv2.IMREAD_COLOR)
    width, height, rgb = img.shape
    for h in range(width):
        for w in range(height):
            for i in range(rgb):
                # Write the hidden message into the 3th bit
                bit = 251 + next(hidden_message) * 4
                img[h][w][i] = img[h][w][i] & bit
    # Write out the image with hidden message
    cv2.imwrite(path_image, img)


def main():
    # Create the images
    number_of_images = 10000
    create_images(number_of_images)
    js_files_list = os.listdir("js_files")

    for i in range(int(number_of_images / 2)):
        image = "Images/image" + i.__str__() + ".png"
        malware = "js_files/" + js_files_list[i % len(js_files_list)]
        create_bad_image(image, malware)


if __name__ == "__main__":
    main()
